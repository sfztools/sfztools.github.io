{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to SFZTools! We have created this organization project to involve more people, with the intention of coding and sharing useful tools that can be used for creating and using audio sample libraries using the SFZ format.","title":"Home"},{"location":"contacts/","text":"Feel free to contact me by email if you need. Any contribution is welcome.","title":"Contact and contributions"},{"location":"faq/","text":"Missing submodules Unfortunately GitHub doesn't include the required git submodules available in the repository in their zip / tar.gz packages, so you need to download the related source manually separately. This leads to the same error below also if you haven't cloned the repository with the --recursive / recurse-submodules switch, resulting with the error: CMake Error at lib/CMakeLists.txt:NNN (add_subdirectory): The source directory path/to/gitsubmodule does not contain a CMakeLists.txt file. -- Configuring incomplete, errors occurred! run git submodule update --init --recursive from the project directory.","title":"FAQ"},{"location":"faq/#missing-submodules","text":"Unfortunately GitHub doesn't include the required git submodules available in the repository in their zip / tar.gz packages, so you need to download the related source manually separately. This leads to the same error below also if you haven't cloned the repository with the --recursive / recurse-submodules switch, resulting with the error: CMake Error at lib/CMakeLists.txt:NNN (add_subdirectory): The source directory path/to/gitsubmodule does not contain a CMakeLists.txt file. -- Configuring incomplete, errors occurred! run git submodule update --init --recursive from the project directory.","title":"Missing submodules"},{"location":"news/","text":"{{ blog_content }}","title":"Latest News"},{"location":"news/posts/2019-06-03-documentation-website/","text":"This website is where you will find the sfizz sampler documentation. Built on Jekyll . Most content is authored in Markdown format. Utilizes Bootstrap for easy skinning and responsive design, making the website available to mobile devices. Utilizes FontAwesome and Favicon Generator for content and website icons.","title":"Documentation Website"},{"location":"news/posts/2020-01-30-sfizz-0.2.0-release/","text":"Added an LV2 plugin version. The parser now falls back to case-insensitive search if it doesn't find the sample file in its current path (#28), so that the behavior of SFZ libraries on case-sensitive filesystems will match Windows and macOS default case-insensitive filesystems. The file now reload automatically on file change, and you can force a reload if necessary (#17). Corrected a bug where memory would be read past the end of the file in memory, generating artifacts. Corrected a bug where the real-time queue handling background loading of the voices would fail spuriously. Corrected a bug where in the LV2 plugin the unknown opcode list was truncated (#18). Added dynamic updates for the current modifiers (panning, stereo image, volume and amplitude mainly) (#19, #28) Added timing for callbacks and file loading times. Added support for pitch bends (#6) as well as pitch-bend activation for regions ( lobend and hibend opcodes). The JACK client will warn you instead of crashing if you do not give it a file to load (#27). Added a windows build process for both the shared library and the LV2. sfizz now builds on all major platforms. See: GitHub release page Download links: sfizz-v0.2.0-linux-amd64.tar.gz sfizz-v0.2.0-linux-arm64.tar.gz sfizz-v0.2.0-osx-amd64.tar.gz sfizz-v0.2.0-src.tar.gz","title":"sfizz 0.2.0 release"},{"location":"news/posts/2020-01-30-sfizz-0.2.0-release/#download-links","text":"sfizz-v0.2.0-linux-amd64.tar.gz sfizz-v0.2.0-linux-arm64.tar.gz sfizz-v0.2.0-osx-amd64.tar.gz sfizz-v0.2.0-src.tar.gz","title":"Download links:"},{"location":"news/posts/2020-02-29-sfizz-0.3.0-release/","text":"Added filter and EQ handling (the filN_... and eqN_... opcodes). There are also no limits to the amount of filters and EQs you can slap on each region beyond your CPU. Most if not all of the relevant filter types from the SFZ v2 spec are supported. Added a new command-line option for the JACK client to set the client's name (#75, #76). Added initial MIDNAM support (#79). The MIDNAM shows the named CCs in the SFZ file for now. Reworked the parsing code for faster dispatching and better handling of complex opcodes with multiple parameters in their opcode name (#40). Reworked the panning and stereo image process. The new process uses tabulated functions and avoid expensive calls to compute sine and cosine functions (#47, #56). Added a crude *noise generator. This generator is a bit expensive for what it does but it's mostly useful to test the filters. Added fine timings within the callbacks for performance improvements and regression testing (#65). Corrected a bug with Ardour where saving a session with no file loaded would crash on reopening. Corrected a bug where voices triggered on key off would never end and fill up the polyphony (#63). Improved and completed CI on all platforms. See: GitHub release page Download links: sfizz-0.3.0-linux-amd64.tar.gz sfizz-0.3.0-linux-arm64.tar.gz sfizz-0.3.0-mingw32.tar.gz sfizz-0.3.0-mingw64.tar.gz sfizz-0.3.0-osx-amd64.tar.gz sfizz-0.3.0-src.tar.gz sfizz-lib-0.3.0-x64-msvc.zip sfizz-lib-0.3.0-x86-msvc.zip sfizz-lv2-0.3.0-linux-amd64.tar.gz sfizz-lv2-0.3.0-linux-arm64.tar.gz sfizz-lv2-0.3.0-x64-msvc-setup.exe sfizz-lv2-0.3.0-x64-msvc.zip sfizz-lv2-0.3.0-x86-msvc-setup.exe sfizz-lv2-0.3.0-x86-msvc.zip","title":"sfizz 0.3.0 release"},{"location":"news/posts/2020-02-29-sfizz-0.3.0-release/#download-links","text":"sfizz-0.3.0-linux-amd64.tar.gz sfizz-0.3.0-linux-arm64.tar.gz sfizz-0.3.0-mingw32.tar.gz sfizz-0.3.0-mingw64.tar.gz sfizz-0.3.0-osx-amd64.tar.gz sfizz-0.3.0-src.tar.gz sfizz-lib-0.3.0-x64-msvc.zip sfizz-lib-0.3.0-x86-msvc.zip sfizz-lv2-0.3.0-linux-amd64.tar.gz sfizz-lv2-0.3.0-linux-arm64.tar.gz sfizz-lv2-0.3.0-x64-msvc-setup.exe sfizz-lv2-0.3.0-x64-msvc.zip sfizz-lv2-0.3.0-x86-msvc-setup.exe sfizz-lv2-0.3.0-x86-msvc.zip","title":"Download links:"},{"location":"news/posts/2020-03-14-sfizz-0.3.1-release/","text":"Added a VST3 plug-in front-end to the library. It is still quite experimental and suffers from problems that stem from the VST3 SDK itself. (#99) Added effect buses and processing. There is a \"lofi\" effect available for now, as well as the same filters and EQs you can apply on the regions. More will come soon! (#84) Added a script to parse and render the timings. This can help tracking performance issues and regressions. (#89) Various fixups, performance improvements, and CI updates See: GitHub release page Download links: sfizz-0.3.1-linux-amd64.tar.gz sfizz-0.3.1-linux-arm64.tar.gz sfizz-0.3.1-mingw32.tar.gz sfizz-0.3.1-mingw64.tar.gz sfizz-0.3.1-osx-amd64.tar.gz sfizz-0.3.1-src.tar.gz sfizz-0.3.1-x64-msvc-setup.exe sfizz-0.3.1-x86-msvc-setup.exe sfizz-lib-0.3.1-x64-msvc.zip sfizz-lib-0.3.1-x86-msvc.zip sfizz-lv2-0.3.1-x64-msvc.zip sfizz-lv2-0.3.1-x86-msvc.zip sfizz-plugins-0.3.1-linux-amd64.tar.gz sfizz-plugins-0.3.1-linux-arm64.tar.gz sfizz-vst3-0.3.1-x64-msvc.zip sfizz-vst3-0.3.1-x86-msvc.zip","title":"sfizz 0.3.1 release"},{"location":"news/posts/2020-03-14-sfizz-0.3.1-release/#download-links","text":"sfizz-0.3.1-linux-amd64.tar.gz sfizz-0.3.1-linux-arm64.tar.gz sfizz-0.3.1-mingw32.tar.gz sfizz-0.3.1-mingw64.tar.gz sfizz-0.3.1-osx-amd64.tar.gz sfizz-0.3.1-src.tar.gz sfizz-0.3.1-x64-msvc-setup.exe sfizz-0.3.1-x86-msvc-setup.exe sfizz-lib-0.3.1-x64-msvc.zip sfizz-lib-0.3.1-x86-msvc.zip sfizz-lv2-0.3.1-x64-msvc.zip sfizz-lv2-0.3.1-x86-msvc.zip sfizz-plugins-0.3.1-linux-amd64.tar.gz sfizz-plugins-0.3.1-linux-arm64.tar.gz sfizz-vst3-0.3.1-x64-msvc.zip sfizz-vst3-0.3.1-x86-msvc.zip","title":"Download links:"},{"location":"news/posts/2020-04-03-sfizz-0.3.2-release/","text":"See: GitHub release page Download links: sfizz-0.3.2-linux-amd64.tar.gz sfizz-0.3.2-linux-arm64.tar.gz sfizz-0.3.2-mingw32.tar.gz sfizz-0.3.2-mingw64.tar.gz sfizz-0.3.2-moddevices.tar.gz sfizz-0.3.2-osx-amd64.tar.gz sfizz-0.3.2-src.tar.gz sfizz-0.3.2-x64-msvc-setup.exe sfizz-0.3.2-x86-msvc-setup.exe sfizz-lib-0.3.2-x64-msvc.zip sfizz-lib-0.3.2-x86-msvc.zip sfizz-lv2-0.3.2-x64-msvc.zip sfizz-lv2-0.3.2-x86-msvc.zip sfizz-plugins-0.3.2-linux-amd64.tar.gz sfizz-plugins-0.3.2-linux-arm64.tar.gz sfizz-vst3-0.3.2-x64-msvc.zip sfizz-vst3-0.3.2-x86-msvc.zip","title":"sfizz 0.3.2 release"},{"location":"news/posts/2020-04-03-sfizz-0.3.2-release/#download-links","text":"sfizz-0.3.2-linux-amd64.tar.gz sfizz-0.3.2-linux-arm64.tar.gz sfizz-0.3.2-mingw32.tar.gz sfizz-0.3.2-mingw64.tar.gz sfizz-0.3.2-moddevices.tar.gz sfizz-0.3.2-osx-amd64.tar.gz sfizz-0.3.2-src.tar.gz sfizz-0.3.2-x64-msvc-setup.exe sfizz-0.3.2-x86-msvc-setup.exe sfizz-lib-0.3.2-x64-msvc.zip sfizz-lib-0.3.2-x86-msvc.zip sfizz-lv2-0.3.2-x64-msvc.zip sfizz-lv2-0.3.2-x86-msvc.zip sfizz-plugins-0.3.2-linux-amd64.tar.gz sfizz-plugins-0.3.2-linux-arm64.tar.gz sfizz-vst3-0.3.2-x64-msvc.zip sfizz-vst3-0.3.2-x86-msvc.zip","title":"Download links:"},{"location":"news/posts/2020-07-24-sfizz-0.4.0-release/","text":"Big stuff: Added support for polynomial resamples and sample_quality opcodes (#238 #267). The engine now defaults to a value of 2 for this opcode, which is more intensive than the original linear interpolation resampler but provides a better quality. Added support for better resampling algorithms also in the wavetables via oscillator_quality (#287). Support _curvecc and _stepcc opcodes (#166 #155 #77) as well as _smoothcc opcodes (#181 #48 #22 #153 #297 #285) Added support and API for Scala tuning files in the engine and the plugins (#253 #268 #282) Other new features: Added support for unison oscillators (#161) Support for the polyphony opcode at all levels (#171 #275), as well as note_polyphony . The group= polyphony is also more flexible and can be defined anywhere. Added support for offset_cc (#170 #159) Added support for direction=reverse (#185 #179) Added support to label the keys using a label_key opcode. This is not really standard yet, but it is now integrated in the LV2 plugin to advertise the names in the MIDNAM file and possibly change their labels in hosts that support it. (#174 #154) Added support for block comments /* */ in the parser (#196 #195) Added a sfizz_render client in tree; you can build it with the make target sfizz_render if the SFIZZ_RENDER CMake variable is set to ON . (#200 #201 #206) Add support to integrate sfizz in DPF plugins (#216) Added an AudioUnit target (#224) Added support for the set_hdcc opcodes and overall added the ability to support floating-point CCs from the API (#233 #232 #244) Added support for FLAC loops (#242 #229) Support the mapPath feature of the LV2 specifications, for tentatively better portability in plugin states (#303) New instances of the sfizz LV2 plugin will now load a default *sine instrument (#283) Issues: Solved some issues with DSmolken's drumkits related to the ampeg envelope (#172) An exception problem was thrown if an sfz file was deleted (#182 #184) Properly bundle the dylib for macOS (#188) Improved the filter stability (#198 #199 #210) Handle USE_LIBCPP properly on configure (#203) Fix the handling of loop markers if sample end= is present (#202 #204) Handle note on with 0 velocity as note offs in the jack client (#208 #211) Solved an issue with super short files (#215) Corrected a stack smashing bug in the LV2 plugin (#226) Fixed some parsing issues with $variables (#230) Properly advertise the VST plugin parameters (#241) Process $ expansions in #include (#247) Change the default build type to RelWithDebInfo (#249) Improve the note stealing algorithm (#214); note that this is still very much a work in progress since many heuristics are in play here. Feel free to report misbehavior regarding note stealing as we improve this regularly. Corrected a bug with SFZ v1 velcurve (#263) Properly support the off_by=-1 opcode to correctly reset the value. (#235) Corrected some errors with null-terminated atoms in the LV2 plugin (#269) Ignore garbage values following e.g. a key number in opcode values (as in key=64Garbage -> key=64 ) (#263) ampeg_****_onccXX modifiers now properly consider multiple CC modifiers (#300 #167) Add headers and group sources in the CMake project for integration with e.g. Qt (#312) Trigger on CC does not require disabling the key triggering through e.g. key=-1 (#315) Support flat notes parsed as string values (#291 #289) Improved handling of release_key (#298); still not perfect, if the region spans multiple key and multiple notes happened with the pedal down, only a single voice will start. Properly read the LV2 option list until the end (#323, by @atsushieno) Corrected a parsing issue when $variables were part of an opcode name (#328) Various other plumbing changes API additions: Added API calls to set $variable define values prior to loading an SFZ file (#168 #119 #130) Added API calls to get key labels and cc labels defined by label_key and label_cc (#174) Added an API call to load an sfz file as an std::string or const char* (#217) Added API calls for Scala files and tunings (#253) Added high-definition floating point CC API calls (#244) Added API calls to change the default resampling quality (#267 #238) See: GitHub release page Download links: sfizz-0.4.0-linux-amd64.tar.gz sfizz-0.4.0-linux-arm64.tar.gz sfizz-0.4.0-mingw32.tar.gz sfizz-0.4.0-mingw64.tar.gz sfizz-0.4.0-moddevices.tar.gz sfizz-0.4.0-osx-amd64.tar.gz sfizz-0.4.0-src.tar.gz sfizz-0.4.0-x64-msvc-setup.exe sfizz-0.4.0-x86-msvc-setup.exe sfizz-lib-0.4.0-x64-msvc.zip sfizz-lib-0.4.0-x86-msvc.zip sfizz-lv2-0.4.0-x64-msvc.zip sfizz-lv2-0.4.0-x86-msvc.zip sfizz-plugins-0.4.0-linux-amd64.tar.gz sfizz-plugins-0.4.0-linux-arm64.tar.gz sfizz-vst3-0.4.0-x64-msvc.zip sfizz-vst3-0.4.0-x86-msvc.zip","title":"sfizz 0.4.0 release"},{"location":"news/posts/2020-07-24-sfizz-0.4.0-release/#download-links","text":"sfizz-0.4.0-linux-amd64.tar.gz sfizz-0.4.0-linux-arm64.tar.gz sfizz-0.4.0-mingw32.tar.gz sfizz-0.4.0-mingw64.tar.gz sfizz-0.4.0-moddevices.tar.gz sfizz-0.4.0-osx-amd64.tar.gz sfizz-0.4.0-src.tar.gz sfizz-0.4.0-x64-msvc-setup.exe sfizz-0.4.0-x86-msvc-setup.exe sfizz-lib-0.4.0-x64-msvc.zip sfizz-lib-0.4.0-x86-msvc.zip sfizz-lv2-0.4.0-x64-msvc.zip sfizz-lv2-0.4.0-x86-msvc.zip sfizz-plugins-0.4.0-linux-amd64.tar.gz sfizz-plugins-0.4.0-linux-arm64.tar.gz sfizz-vst3-0.4.0-x64-msvc.zip sfizz-vst3-0.4.0-x86-msvc.zip","title":"Download links:"},{"location":"news/posts/2020-10-15-sfizz-0.5.0-release/","text":"Big stuff: Added basic support for Flex EGs (#388) as modulation sources (targets to come) Added basic support for LFOs (#338) as modulation sources (targets to come) EGs and LFOs can now target EQs and filters (#424) A new GUI has been added and is common to the LV2 and VST plugin (#397 #404 #419 #489 #492 #495 #496 #497); still mostly work in progress, more to come! Provided build systems to use sfizz with the VCV-Rack SDK and the DISTRHO Plugin Framework New features: Added support for sustain_lo (#327) Audio files are now read incrementally, improving the availability under load (#294) A new output port for active voices has been added in the LV2 plugin (#321) Added support for effect types reverb , disto , gate and comp The voice stealing is now configurable using hint_stealing , with possible values as first , oldest (default), and envelope_and_age . The latter is the more CPU-consuming version which requires to follow the envelope of each voice to kill low-volume ones preferably. Note that the voice stealing continue to kill all voices started on the same event by default (i.e. all layers of the same note). (#344 #384 #353) sfizz now internally uses a modulation matrix to link all modulation sources (CC, LFOs, and EGs) and targets (#335 #351 #386) Added support for off_time and complete support for off_mode . The voice stealing logic was improved to take into account polyphony , note_polyphony and group_polyphony properly (#349 #352 #393 #413 #414 #467). Note that this support is also available for the engine polyphony. In this case, some additional voice will take over for the release duration (#477). The wavetable quality has been improved (#347) Support for offset_cc (#385) sfizz_render now supports a --quality switch, which acts like the sample_quality= opcode (#408) pitch_keycenter=sample is now taken into account (#362) Support oscillator_detunecc (#434) Support basic FM synthesis for oscillator regions (#436) CC 7, 10 and 11 are now linked by default to pan, volume and expression (#475) Support hint_ram_based for loading the whole samples in RAM (#353) Support for loop_crossfade (#464) All phase-related opcodes in sfizz now use the 0->1 convention, as does ARIA/Sforzando, instead of the 0->360 convention (#499) Issues: Loading probable wavetable files, or wav files containing wavetable metadata now sets oscillator=on on the region (#431) The default sample_quality was put back to 1 for live playing and 2 for freewheeling (#405) Fix an unwanted copy in the realtime thread (#334) Improve the filter shortcut path (#336) Fix the default ampeg_attack and ampeg_release to avoid clicks (#437) Corrected a race condition in freewheeling mode (#500) Fixed a potential non-realtime operation in the realtime thread (#498) Fix a bug when using a larger internal oversampling for regions with an offset value (#469) Fix an issue when loops occured more than once in a block (#462) Increase the range of the clamping on amplitude (#468) and pitch (#474) Fix CC modulations with their source depth set to 0 (#475) Fix an overshoot for crazily large cutoff values (#478); cutoffs are now clamped Improve the file loading logic to keep files in memory for a short while in case they get reused (#425) Fix the MIDNAM output for the case where extended CCs are used (#420) Fixed a bug where release voices where not ignored on self-mask search (#348) Improved the release logic in many cases (#324 #414 #413) Set the level of the *noise generator to match ARIA's (#429) Support for atom:Blank atoms in the LV2 plugin (#363) Fixed amp_veltrack behavior (#371) Fix the ADSRH envelope release rate (#376) Fixed an error for files where the loop spans the entire file (#378) Fixed sustain_cc behavior (#377) Match the default volumes with ARIA (#381) Properly set the loop_mode for release regions (#379) Regions with end=0 are now properly disabled (#380) Fix fil_random to be bipolar (#452) The sequence order now properly starts at 1 (#451) Fix an issue on Flush to Zero on some ARM platforms (#455) Fix pitch_veltrack (#461) Opcode values now properly stop at the < character (#439) Fix various build errors and issues on all platforms (#345 #401 #400 #399 #417 #447 #449 #443 #453 #456 #459 #471 #484 #487 #488 #491) The file dialog initial directory is now the root of the current loaded file (#428) Existing and known CC values are now correctly taken into account for modulations (#421) Fix various performance regressions and improved performance especially on ARM builds (#410 #412 #415 #426) API changes: Added API support for setting the playback state, time position and signature (#354) The API documentation on the sfizz's website has been streamlined alot ! See: GitHub release page Download links: sfizz-0.5.0-linux-amd64.tar.gz sfizz-0.5.0-linux-arm64.tar.gz sfizz-0.5.0-mingw32.tar.gz sfizz-0.5.0-mingw64.tar.gz sfizz-0.5.0-moddevices.tar.gz sfizz-0.5.0-osx-amd64.tar.gz sfizz-0.5.0-src.tar.gz sfizz-0.5.0-x64-msvc-setup.exe sfizz-0.5.0-x86-msvc-setup.exe sfizz-lib-0.5.0-x64-msvc.zip sfizz-lib-0.5.0-x86-msvc.zip sfizz-lv2-0.5.0-x64-msvc.zip sfizz-lv2-0.5.0-x86-msvc.zip sfizz-plugins-0.5.0-linux-amd64.tar.gz sfizz-plugins-0.5.0-linux-arm64.tar.gz sfizz-vst3-0.5.0-x64-msvc.zip sfizz-vst3-0.5.0-x86-msvc.zip","title":"sfizz 0.5.0 release"},{"location":"news/posts/2020-10-15-sfizz-0.5.0-release/#download-links","text":"sfizz-0.5.0-linux-amd64.tar.gz sfizz-0.5.0-linux-arm64.tar.gz sfizz-0.5.0-mingw32.tar.gz sfizz-0.5.0-mingw64.tar.gz sfizz-0.5.0-moddevices.tar.gz sfizz-0.5.0-osx-amd64.tar.gz sfizz-0.5.0-src.tar.gz sfizz-0.5.0-x64-msvc-setup.exe sfizz-0.5.0-x86-msvc-setup.exe sfizz-lib-0.5.0-x64-msvc.zip sfizz-lib-0.5.0-x86-msvc.zip sfizz-lv2-0.5.0-x64-msvc.zip sfizz-lv2-0.5.0-x86-msvc.zip sfizz-plugins-0.5.0-linux-amd64.tar.gz sfizz-plugins-0.5.0-linux-arm64.tar.gz sfizz-vst3-0.5.0-x64-msvc.zip sfizz-vst3-0.5.0-x86-msvc.zip","title":"Download links:"},{"location":"news/posts/2020-10-25-sfizz-0.5.1-release/","text":"Published by redtide at 2020-10-25 10:33:35 Corrected race conditions that appeared with the new thread and file pools (#507 #508 #514 #521) Take the internal oversampling factor into account for loop points, and solve an issue where loop points specified in sfz files were not taken into account (#506) Fix an implementation error for the internal hash function when applied on a single byte (#512) Knobs are linear in the AU plugin (#517) Fix a crash in VSTGUI (#520) Fix the resource path in the LV2 plugin under windows (#524) Add MacOS make install rules (#525) See: GitHub release page Download links: sfizz-0.5.1-linux-amd64.tar.gz sfizz-0.5.1-linux-arm64.tar.gz sfizz-0.5.1-mingw32.tar.gz sfizz-0.5.1-mingw64.tar.gz sfizz-0.5.1-moddevices.tar.gz sfizz-0.5.1-osx-amd64.tar.gz sfizz-0.5.1-src.tar.gz sfizz-0.5.1-x64-msvc-setup.exe sfizz-0.5.1-x86-msvc-setup.exe sfizz-lib-0.5.1-x64-msvc.zip sfizz-lib-0.5.1-x86-msvc.zip sfizz-lv2-0.5.1-x64-msvc.zip sfizz-lv2-0.5.1-x86-msvc.zip sfizz-plugins-0.5.1-linux-amd64.tar.gz sfizz-plugins-0.5.1-linux-arm64.tar.gz sfizz-vst3-0.5.1-x64-msvc.zip sfizz-vst3-0.5.1-x86-msvc.zip","title":"sfizz 0.5.1 release"},{"location":"news/posts/2020-10-25-sfizz-0.5.1-release/#download-links","text":"sfizz-0.5.1-linux-amd64.tar.gz sfizz-0.5.1-linux-arm64.tar.gz sfizz-0.5.1-mingw32.tar.gz sfizz-0.5.1-mingw64.tar.gz sfizz-0.5.1-moddevices.tar.gz sfizz-0.5.1-osx-amd64.tar.gz sfizz-0.5.1-src.tar.gz sfizz-0.5.1-x64-msvc-setup.exe sfizz-0.5.1-x86-msvc-setup.exe sfizz-lib-0.5.1-x64-msvc.zip sfizz-lib-0.5.1-x86-msvc.zip sfizz-lv2-0.5.1-x64-msvc.zip sfizz-lv2-0.5.1-x86-msvc.zip sfizz-plugins-0.5.1-linux-amd64.tar.gz sfizz-plugins-0.5.1-linux-arm64.tar.gz sfizz-vst3-0.5.1-x64-msvc.zip sfizz-vst3-0.5.1-x86-msvc.zip","title":"Download links:"},{"location":"news/posts/2021-04-16-sfizz-1.0.0-release/","text":"Published by github-actions[bot] at 2021-04-16 15:31:49 We would like to thank to our contributors at https://opencollective.com/sfztools, as well as everyone who is regularly testing and pushing sfizz to the limits! Your support to this project in any form is much appreciated. You can download builds catered for your Linux distribution over at OBS . The Mac, Windows and MOD packages are below in the release assets, as well as the source packages. Headlines: SFZ v1 is virtually supported except for a handful of opcodes ! Please check https://sfz.tools/sfizz/development/status/ for the up-to-date status of opcode support. It is now possible to build sfizz without relying on libsndfile, using a set of libraries. This is now the default build mode. Building with libsndfile can be enabled at configure time. The library and plugins can now load DecentSampler files, and could accomodate other formats. CCs, keyswitch range, key ranges and active keyswitch are now displayed in the editor for all plugins. There has been a lot of UI work to make it more practical to use. There is an OSC interface in the library, which allows to have introspection into the currently loaded file, the state of CCs/keyswitches, and also set some parameters for loaded regions. API/ABI changes for the library: The ABI is broken, leading to a major version change. Thread-safety now has to be handled externally. The API has been updated to provide a concurrency spec. The current version of the internal oversampling factor was too unstable and has been disabled for the time being. The API and plugin parameters are staying for compatibility. A more robust implementation should come soon. Added documentation in the API calls to make clear that sample-accurate triggering of voice requires messages to be sent in order. The VST plugin in particular did not respect this and has been updated. A new bpmTempo method has been added to pass tempo as beats-per-minute rather than seconds per beat. The previous version is deprecated. There are new HD (float) versions of API calls for note and CC events. aftertouch is renamed as channel_aftertouch (for C) and channelAftertouch (for C++) throughout the API to be more consistent with polyAftertouch . UI: UI improvements and tweaks, adding themability in particular (#826 #824 #822 #821 #819 #818 #816 #812 #799 #743 #691 #674 #673 #672 #670 #662 #661 #656) Added an info panel in the plugin UI (#793 #792 #791 #789 #788 #787 #782 #779 #773) Improve font handling (#669 #622) Improve file handling in the UI (#645 #659 #658) and enable the use of a \"default user directory\" or environment variable. This also allows the plugin to \"find\" missing sfz files in a different environment (#644 #581 #572 #532) Support DecentSampler and a generic importer for other formats (#725 #715 #680) Show the current keyswitch on the editor and the virtual keybnoard (#665 #657) Added a button to reset the scala file to default (#660) The plugins now display an image through the image opcode (#770) Plugins: Remove automation from un-automatable parameters in the VST plugin (#814) Order VST events (#810 #803) Added the option to build a VST2 version of sfizz if you have the SDK available (#708) The C++ standard is set to 14 if you build the UI on LV2, or if you build the VST version. This will likely increase to 17 shortly due to the dependency on VSTGUI. The ui-less LV2 plugin and the library remain C++11 compatible. Note that windows builds already use C++17 on all targets. (#795) Fix corruptions and crashes that happened in the LV2 plugin (#794 #668 #557) The internal controllers of sfizz are now presented as parameters in the LV2 plugin. Experimental midi binding is also active on them. By default the \"direct\" midi input is disabled and you need to map to the parameters. A compile-time option is available to re-enable the midi input. (#776) Fix crashes in the VST plugin (#709 #702 #681 #625) Enable checking if file changed even when the transport is not running (#712 #689) The Mac builds are now signed (#550 #552) Update VST to 3.7.2 (#798) Library: Small files with only zeroes are considered as *silence (#831) The library uses an Hermite interpolation by default (#828 #829) Fix an error where sample indices could wrap for massive pitch modulations (#825 #751) Add high-definition versions of the API calls (#820) Corrected a bug where regions with long release envelopes would not stop on sample ending (#811) Support polyphonic aftertouch events, triggers and targets (#809 #764) Support monophonic aftertouch events, triggers and targets (#765 #630 ) Corrected a regression where sfizz would stop loading the SFZ file if some sample files cannot be loaded (#806) Update abseil and ghc::filesystem (#780), the tunings library from Surge (#785), catch2 (#711) It is now possible to change some parameters of the regions after loading the file through the OSC interface (#761) Improve the choking logic to match the spec and other implementations (#778) Added modulation targets for amplitude, pan, width, position, pitch and volume (#760) Support CC modifiers for end , loop_start and loop_end (#752) Support CC modifiers for LFO targets (#753) Support SFZ v1 extended CCs (#747) Implement the sostenuto logic (#739) Refactored opcode reading and storing (#748 #727 #721 #722 #720 #700 #559) Fix the parser to support sharp (#) symbols in file names (#746) Improved the ADSR transitions from decay to sustain, and from release to 0 (#734 #373) Reset the smoothers if the playhead moved (#731 #710 #382) Corrected a bug where the first sample was ignored on playback (#732 #394) Added CC modulation for depth targets (#730) If the sustain level is low enough the envelope is set to free-run (#723, #676) Fix loop crossfades when the loop starts early in the sample (#718) Fix random generators to match ARIA's behavior (#719) Fix corruption appearing in some sample libraries (#717 #695) Smoothers are now linear (#713 #714 #703) Filter/EQ parameters are clamped even with modulation (#701 #699) Implement v1 LFOs (#693) Support count and loop_count (#654) Fix a bug where the sample rate was not propagated properly to the flex EGs (#683) Delay envelope start by the voice delay (#655 #432) Support delay_oncc (#653) Support sw_vel (#650) Fix note_polyphony choking (#634 #529) Respect the end opcode (#618) Fix allocations that may happen on the RT thread (#621) Fix the polyphony manager when the engine polyphony is changed after a file is loaded (#619) Avoid reloading invalid files (#614) Allow parsing of some badly formed files files (#600) Match ARIA's LFOs (#613) Added windowed sinc interpolation for sample_quality from 3 to 10 (#609) Improve the Hermite interpolation (#597) Update AtomicQueue to correct a bug (#583) Support lfoN_beats (#553) Add region and voice introspection to the OSC interface (#555) Enable fast-math on MSVC (#567) Fix crashes when building with libsndfile (#542 #543) Properly pad and align the wav files upon reading (#538) Add an alternative to libsndfile (#482 #534 #535 #536) Handle gracefully having a different sw_default in a region (#531) Support disjoint keyswitch ranges, as well as sw_lolast and sw_hilast (#526) See: GitHub release page Download links: sfizz-1.0.0-macos.dmg sfizz-1.0.0-mingw32.tar.gz sfizz-1.0.0-mingw64.tar.gz sfizz-1.0.0-moddevices.tar.gz sfizz-1.0.0-win32.exe sfizz-1.0.0-win64.exe sfizz-1.0.0.tar.gz","title":"sfizz 1.0.0 release"},{"location":"news/posts/2021-04-16-sfizz-1.0.0-release/#download-links","text":"sfizz-1.0.0-macos.dmg sfizz-1.0.0-mingw32.tar.gz sfizz-1.0.0-mingw64.tar.gz sfizz-1.0.0-moddevices.tar.gz sfizz-1.0.0-win32.exe sfizz-1.0.0-win64.exe sfizz-1.0.0.tar.gz","title":"Download links:"},{"location":"news/posts/2021-10-23-sfizz-1.1.0-release/","text":"Published by github-actions[bot] at 2021-10-23 21:38:57 New supports and plugins: Added a Puredata plugin (#869 #873 #874) Added support for hint_sustain_cancels_release , which when activated reproduces a LinuxSampler behavior by sustaining already released notes (#898). A GUI option should come later. Added support for amp_veltrack_oncc , pitch_veltrack_oncc , and fil_veltrack_oncc (#938) Dynamic EGs are supported for flex EGs (#933 #932 #930) Support _curvecc for extended CCs (#993) Support lorand and hirand on CC-triggered regions (#997) The engine now parses oscillator=auto and only enables oscillators on short samples with wavetable tags in the WAV metadata (#954) Bug fixes and other improvements: Added a GUI volume meter (#859) Implement support for VST3 keyswitch and midi note names (#877 #876) Fixed a bug which could prevent parameters to be automated in Ardour (#893) Fixed a bug where high definition CC, crossfade or aftertouch events could be ignored (#855 #896) Resetting all controllers will now reset them to their default, instead of 0 (#905) Filter resonance can now be negative (#919) Corrected a bug for the LV2 plugin when used in the Ardour DAW (#924) Respect the editor set for sfz files on MacOS (#925) The JACK and PureData clients can use custom importers (#926) Fix off_by behavior with long-releasing notes (#972) Polyphony groups can have negative indices (#934) Parse lokey=-1 as hikey=-1 (#941) Improved the preloading for monolithic wave files (#935) Since the default build of the LV2 plugin is not statically linked against libsndfile, the distribution license is changed to the ISC license (#943) The DecentSampler importer now better translates the loop modes (#981) Even when plugin-side automation is disabled (through SFIZZ_LV2_PSA ), sustain and sostenu CC events will still go through to the plugin to improve the user experience on hosts that do not support automatic mapping of control ports to midi events through the LV2 midi:binding extension (#963). Fixed a bug that could hang the background thread in the VST plugin (#984 #865 #864) The current keyswitch is properly saved and restored with the plugin state (#961) It is now possible to enter values for CCs on the plugin GUI by double clicking on the CC knob (#945). A high-resolution input option is also available on a right click. Added a text interface to sfizz_jack (#973) CC-triggered voices can be cut off by polyphony groups (#917) Allow building on MacOS 10.9 (#990) Improved the X11 runloop (#986) Added a polyphony option to sfizz_render (#992) Corrected a bug which prevented VST3 or LV2 plugins to be loaded by the Ardour DAW (#995) Corrected a bug where octave and note offset were not reset upon loading a new file (#994) Corrected a bug where CC-triggered voices could generate note-offs when cut by a polyphony group (#998) Added man pages for sfizz_render and sfizz_jack (#999) Various build system improvements for different platforms (#957 #958 #964 #967 #968 #989 #978 #942 #921 #920 #902 #849 #850 #856 #1001) See: GitHub release page Download links: sfizz-1.1.0-macos.dmg sfizz-1.1.0-mingw32.tar.gz sfizz-1.1.0-mingw64.tar.gz sfizz-1.1.0-moddevices.tar.gz sfizz-1.1.0-win32.exe sfizz-1.1.0-win64.exe sfizz-1.1.0.tar.gz","title":"sfizz 1.1.0 release"},{"location":"news/posts/2021-10-23-sfizz-1.1.0-release/#download-links","text":"sfizz-1.1.0-macos.dmg sfizz-1.1.0-mingw32.tar.gz sfizz-1.1.0-mingw64.tar.gz sfizz-1.1.0-moddevices.tar.gz sfizz-1.1.0-win32.exe sfizz-1.1.0-win64.exe sfizz-1.1.0.tar.gz","title":"Download links:"},{"location":"news/posts/2021-11-08-sfizz-1.1.1-release/","text":"Published by github-actions[bot] at 2021-11-08 15:13:36 Roll back VSTGUI to 4.10.2 to avoid corruption of the UI in some scenarios See: GitHub release page Download links: sfizz-1.1.1-macos.dmg sfizz-1.1.1-mingw32.tar.gz sfizz-1.1.1-mingw64.tar.gz sfizz-1.1.1-moddevices.tar.gz sfizz-1.1.1-win32.exe sfizz-1.1.1-win64.exe sfizz-1.1.1.tar.gz","title":"sfizz 1.1.1 release"},{"location":"news/posts/2021-11-08-sfizz-1.1.1-release/#download-links","text":"sfizz-1.1.1-macos.dmg sfizz-1.1.1-mingw32.tar.gz sfizz-1.1.1-mingw64.tar.gz sfizz-1.1.1-moddevices.tar.gz sfizz-1.1.1-win32.exe sfizz-1.1.1-win64.exe sfizz-1.1.1.tar.gz","title":"Download links:"},{"location":"news/posts/2022-01-15-sfizz-1.2.0-release/","text":"Big stuff: The sfizz engine now handles multiple stereo outputs, through the output opcode. The VST3 and LV2 plugins both have a 16-out version (as 8 stereo outs) (#1002) The emscripten branch allows to run sfizz through WASM for your web-oriented needs. An example with WebMidi is available at https://sfz.tools/sfizz-webaudio/ (requires a Chromium-based browser), with source code at https://github.com/sfztools/sfizz-webaudio. sfizz can now parse embedded samples in base64 data (#1041) Smaller things: Added support in the plugin GUI/parameters for the \"sustain cancels release\" behavior of LinuxSampler. The internal midi state is not reset when loading/reloading. This means in particular that controls changed on an instrument will be kept if you edit the underlying SFZ file (#1002) Updated dependent libraries (#1018) Support extended CCs 140 and 141 for \"keydelta\" (#1003) Negative values for lokey will not disable the region anymore (#1019) Updated the GUI option panel for the plugins (#1022) and some hints on the tab buttons (#1057) Choke groups now act through CC switches (#1024) Corrected a bug when reloading some files (#1028) Added better support for files that are fully loaded in memory and not simply preloaded (#1031) Corrected mistakes in the shelving filters (#1027) Corrected a crash in some VST3 hosts (#1035) Properly read exponential notation in floats (#1036) sfizz is now clamping flex EG levels (#1037) sw_last is now properly affected by octave_offset and note_offset (#1039) Corrected a bug where long-tailed effects would be cut off (#1050) Corrected a bug in the band rejection filters (#1052). The apf_1p filter still misbehaves and is disabled for now. Numpad input is now properly handled (#1053) In the LV2 plugin, plugin-side automation is now enabled by default (which means all SFZ control changes are naturally bound to incoming MIDI control changes and not controlled by a plugin parameter). You can disable this at build time and show the relevant parameters using SFIZZ_LV2_PSA . Too many hosts expect their plugins to respond to midi messages for things like pedal and volume. (#1054) Added support for loprog/hiprog (#1058) The LV2 plugin now has a string output parameter with the CC used by the instrument (#1060) API changes: - sfizz_enable_logging and sfizz_disable_logging (and their C++ counterparts) are deprecated, replaced by sfizz_get_callback_breakdown which needs to be called at the end of a callback by the host (#1034). All file writing is handled by the host for logging. - Added sfizz_send_program_change and its C++ counterpart. - Added sfizz_set_sustain_cancels_release and its C++ counterpart. See: GitHub release page Download links: sfizz-1.2.0-macos.dmg sfizz-1.2.0-moddevices.tar.gz sfizz-1.2.0-win32.exe sfizz-1.2.0-win64.exe sfizz-1.2.0.tar.gz","title":"sfizz 1.2.0 release"},{"location":"news/posts/2022-01-15-sfizz-1.2.0-release/#download-links","text":"sfizz-1.2.0-macos.dmg sfizz-1.2.0-moddevices.tar.gz sfizz-1.2.0-win32.exe sfizz-1.2.0-win64.exe sfizz-1.2.0.tar.gz","title":"Download links:"},{"location":"news/posts/2023-04-15-sfizz-1.2.1-release/","text":"Mac OS Installer (#93 #1087) Updated bundled dependencies and added more options to use those preinstalled in system (#1104 #1117 #1143 #1145 #1149) CI: Various updates and fixes for GitHub Actions; removed Travis and Appveyor Add LFO frequency as an EG target (#1103) New image_controls opcode to add a background image on UI' Controls tab (#1156) Disabled temporarily the embedded sample test Parse 0-valued note ons as note offs (#1072 #1073) Correct a bug with dynamic updates on offed EGs (#2 #1088) jack: Wait for CLI thread to finish on quit (#1097) Fix libsndfile build and add CI (#1112 #1090) Last keyswitches don't change the midi state (#1113 #1074) Add section suffix to man pages (#1124) HiDPI: Added a Zoom menu in Settings to apply an user' zoom ratio preference (#1123 #1153) Colored logo button on mouse hover (#1151) Centered, full-size background images container (#1152) XP style tooltips (#1156) Window size has been changed to be compatible with ARIA banks (775x335 for image backgrounds) (#1140 #1156) The CC knobs rotator and title label have a white color on a semi-transparent background in the controls tab (#1156) The info tab becomes a dark and semi-transparent overlay dialog above the Home tab; both will display the same background image when available (#1156) Handle LV2 scaleFactor supportedOption (#1153) Added suffix \"-multi\" to LV2 and VST3. (#1084) Fix LV2 manifest when using PSA (#1114) Fix 2 bugs in LV2 and VST3 for loads and stores (#1115 #1098) See: GitHub release page Download links: sfizz-1.2.1-macos.pkg sfizz-1.2.1-moddevices.tar.gz sfizz-1.2.1-win32.exe sfizz-1.2.1-win64.exe sfizz-1.2.1.tar.gz","title":"sfizz 1.2.1 release"},{"location":"news/posts/2023-04-15-sfizz-1.2.1-release/#download-links","text":"sfizz-1.2.1-macos.pkg sfizz-1.2.1-moddevices.tar.gz sfizz-1.2.1-win32.exe sfizz-1.2.1-win64.exe sfizz-1.2.1.tar.gz","title":"Download links:"},{"location":"news/posts/2023-08-26-sfizz-1.2.2-release/","text":"Library Added WavPack support (#1129 by @lucianoiam) Changed The project has been split into 2 repositories to separate the library from the UI/plugins. (#1162) Unclamp the cutoff and add OSC queries for the cutoff modifiers (#1100 by @PythonBlue) SIMDe update (#1161 #1163) Update cpuid, dr_libs and stb_vorbis libraries (#1164) Various CMake and CI changes/fixes, also because the repository split Minimum CMake version required is now 3.15 for Windows, 3.13 for other systems Configurable amount of Control Change messages via CMake' MIDI_CC_COUNT variable, Config.h is now a generated file Update Abseil to 20230125.3 (#1169) Fixed Crash fix for reloading SFZ: needed to copy preloadCallCount in FilePool copy constructors (#1170 by @essej) Temporary fixes to build benchmarks and tests (see #1148) Fixed FlexEGs shape (#1176 #1177) Fixed build on Windows Fixed modulation matrix when CC modulations are per voice (#1173 #1179 by @PythonBlue) Fixed and reenabled tests Modifications to support universal x86_64/ARM builds on macOS (#1183 by @essej) Removed VCPKG and MinGW CI builds Plugins Added New repository for UI/plugins. (sfztools/sfizz#1162) CI: Restored the macOS universal build that was working in AppVeyor (sfztools/sfizz@15628e13290e9be4e33ebf74aef286a5e3221579) but sacrifice WavPack assembly optimizations, see https://github.com/dbry/WavPack/issues/93 Changed Updated VST3 SDK to v3.7.7, including our custom AU wrapper (#25) Updated VSTGUI to v4.12.3 (patched), this requires Windows 10 or later Updated stb_image to v2.28 Updated LV2 bundled library to v1.18 Various CMake and CI changes/fixes, also because the repository split Minimum CMake version required is now 3.15 for Windows, 3.13 for other systems Using linters for all type of plugins supported in CI Fixed Various code fixes for the newer version of VSTGUI; Windows 10 minimum required Removed macOS: removed DMG resources and Carbon support from VSTGUI See: GitHub library release page GitHub plugins release page Download links: sfizz-1.2.2-macos.pkg sfizz-1.2.2-win32.exe sfizz-1.2.2-win64.exe Library source archive Plugins + library source archive","title":"sfizz 1.2.2 release"},{"location":"news/posts/2023-08-26-sfizz-1.2.2-release/#library","text":"","title":"Library"},{"location":"news/posts/2023-08-26-sfizz-1.2.2-release/#added","text":"WavPack support (#1129 by @lucianoiam)","title":"Added"},{"location":"news/posts/2023-08-26-sfizz-1.2.2-release/#changed","text":"The project has been split into 2 repositories to separate the library from the UI/plugins. (#1162) Unclamp the cutoff and add OSC queries for the cutoff modifiers (#1100 by @PythonBlue) SIMDe update (#1161 #1163) Update cpuid, dr_libs and stb_vorbis libraries (#1164) Various CMake and CI changes/fixes, also because the repository split Minimum CMake version required is now 3.15 for Windows, 3.13 for other systems Configurable amount of Control Change messages via CMake' MIDI_CC_COUNT variable, Config.h is now a generated file Update Abseil to 20230125.3 (#1169)","title":"Changed"},{"location":"news/posts/2023-08-26-sfizz-1.2.2-release/#fixed","text":"Crash fix for reloading SFZ: needed to copy preloadCallCount in FilePool copy constructors (#1170 by @essej) Temporary fixes to build benchmarks and tests (see #1148) Fixed FlexEGs shape (#1176 #1177) Fixed build on Windows Fixed modulation matrix when CC modulations are per voice (#1173 #1179 by @PythonBlue) Fixed and reenabled tests Modifications to support universal x86_64/ARM builds on macOS (#1183 by @essej)","title":"Fixed"},{"location":"news/posts/2023-08-26-sfizz-1.2.2-release/#removed","text":"VCPKG and MinGW CI builds","title":"Removed"},{"location":"news/posts/2023-08-26-sfizz-1.2.2-release/#plugins","text":"","title":"Plugins"},{"location":"news/posts/2023-08-26-sfizz-1.2.2-release/#added_1","text":"New repository for UI/plugins. (sfztools/sfizz#1162) CI: Restored the macOS universal build that was working in AppVeyor (sfztools/sfizz@15628e13290e9be4e33ebf74aef286a5e3221579) but sacrifice WavPack assembly optimizations, see https://github.com/dbry/WavPack/issues/93","title":"Added"},{"location":"news/posts/2023-08-26-sfizz-1.2.2-release/#changed_1","text":"Updated VST3 SDK to v3.7.7, including our custom AU wrapper (#25) Updated VSTGUI to v4.12.3 (patched), this requires Windows 10 or later Updated stb_image to v2.28 Updated LV2 bundled library to v1.18 Various CMake and CI changes/fixes, also because the repository split Minimum CMake version required is now 3.15 for Windows, 3.13 for other systems Using linters for all type of plugins supported in CI","title":"Changed"},{"location":"news/posts/2023-08-26-sfizz-1.2.2-release/#fixed_1","text":"Various code fixes for the newer version of VSTGUI; Windows 10 minimum required","title":"Fixed"},{"location":"news/posts/2023-08-26-sfizz-1.2.2-release/#removed_1","text":"macOS: removed DMG resources and Carbon support from VSTGUI See: GitHub library release page GitHub plugins release page","title":"Removed"},{"location":"news/posts/2023-08-26-sfizz-1.2.2-release/#download-links","text":"sfizz-1.2.2-macos.pkg sfizz-1.2.2-win32.exe sfizz-1.2.2-win64.exe Library source archive Plugins + library source archive","title":"Download links:"},{"location":"news/posts/2024-01-15-sfizz-1.2.3-release/","text":"Added Support for curvecc opcodes on v1 EGs (@PythonBlue) Support for lotimer/hitimer (@essej) Changed Allow polyphonic aftertouch (cc 130) to respect the note number, which improves e.g. the choking logic (@essej) Fixed Adjusted the gain compensation on pan stages (@cvde) Ensure that voices are cleaned up before being force-reused (@iv-m) Fixed a bug in the wavpack wrapper for multichannel files (@KKQ-KKQ) Fixed a bug in the way the tuning root was computed (@KKQ-KKQ) Fixed a bug where samples would be loaded in RAM twice when using hint_ram_based=1 Fixed a bug where quasi-simultaneous notes would not properly choke each other Don't send a note off event if a note was choked by a CC event. Download links sfizz-1.2.3-macos.tar.gz sfizz-1.2.3-win32.zip sfizz-1.2.3-win64.zip sfizz-1.2.3.tar.gz GitHub Release Downloads","title":"sfizz 1.2.3 release"},{"location":"news/posts/2024-01-15-sfizz-1.2.3-release/#added","text":"Support for curvecc opcodes on v1 EGs (@PythonBlue) Support for lotimer/hitimer (@essej)","title":"Added"},{"location":"news/posts/2024-01-15-sfizz-1.2.3-release/#changed","text":"Allow polyphonic aftertouch (cc 130) to respect the note number, which improves e.g. the choking logic (@essej)","title":"Changed"},{"location":"news/posts/2024-01-15-sfizz-1.2.3-release/#fixed","text":"Adjusted the gain compensation on pan stages (@cvde) Ensure that voices are cleaned up before being force-reused (@iv-m) Fixed a bug in the wavpack wrapper for multichannel files (@KKQ-KKQ) Fixed a bug in the way the tuning root was computed (@KKQ-KKQ) Fixed a bug where samples would be loaded in RAM twice when using hint_ram_based=1 Fixed a bug where quasi-simultaneous notes would not properly choke each other Don't send a note off event if a note was choked by a CC event.","title":"Fixed"},{"location":"news/posts/2024-01-15-sfizz-1.2.3-release/#download-links","text":"sfizz-1.2.3-macos.tar.gz sfizz-1.2.3-win32.zip sfizz-1.2.3-win64.zip sfizz-1.2.3.tar.gz GitHub Release Downloads","title":"Download links"},{"location":"sfizz/","text":"sfizz is a sample-based musical synthesizer. It features the well-established SFZ instrument format at its core, which permits to use existing instrument libraries, or create personal instruments with ease. Not only is sfizz ready-to-use as an instrument plugin of its own, the library allows developers to create instruments of their own, taking advantage of the abilities of SFZ. Get sfizz Features SFZ compatible sfizz supports SFZv1, and is partially compatible with SFZv2, the current revision of the instrument specification. The objective is to achieve a high level of SFZ compatibility, and the quality improves with every release. Ready-to-use The synthesizer is available as audio workstation plugins, in VST3i , Audio Unit and LV2 formats. The more advanced users may also use a standalone JACK client. For instrument makers The hot reload ability helps you to design intruments. You are able to edit your custom instrument and test the change on the fly, without having to interact with the software manually. Low memory footprint The streaming system loads the sounds on demand, and dynamically reclaims the memory of sounds which are no longer used. This keeps the RAM memory requirement at minimum. See in action Some artists have demonstrated music creation using sfizz, independently of this project. You are welcome to watch the media and support their work. How to use Virtual Playing Orchestra in Ardour by unfa","title":"Home"},{"location":"sfizz/#features","text":"SFZ compatible sfizz supports SFZv1, and is partially compatible with SFZv2, the current revision of the instrument specification. The objective is to achieve a high level of SFZ compatibility, and the quality improves with every release. Ready-to-use The synthesizer is available as audio workstation plugins, in VST3i , Audio Unit and LV2 formats. The more advanced users may also use a standalone JACK client. For instrument makers The hot reload ability helps you to design intruments. You are able to edit your custom instrument and test the change on the fly, without having to interact with the software manually. Low memory footprint The streaming system loads the sounds on demand, and dynamically reclaims the memory of sounds which are no longer used. This keeps the RAM memory requirement at minimum.","title":"Features"},{"location":"sfizz/#see-in-action","text":"Some artists have demonstrated music creation using sfizz, independently of this project. You are welcome to watch the media and support their work. How to use Virtual Playing Orchestra in Ardour by unfa","title":"See in action"},{"location":"sfizz/downloads/","text":"sfizz 1.2.3 - released on January 14, 2024 Linux Packages for a wide variety of Linux distributions. 64-bit Stable 64-bit Current Windows Installers for Microsoft Windows 7 and up, all 64-bit and 32-bit editions. 64-bit 32-bit macOS Universal macOS package, for 64-bit Intel and Apple Silicon. Universal Source code Archive of the source code, available under a free software license. Library source archive Plugins source archive (library included)","title":"Downloads"},{"location":"sfizz/engine_description/","text":"Global view The sfizz engine is basically a \"Synth\" object that takes an SFZ file in, receives MIDI-type events and is able to render audio through successive calls to a callback function. This is in line with the way most audio applications and plugins are working. A high-level overview is presented in the following diagram. graph TD A[C and C++ API entry point] B[Synth] C[1. Region list] D[2. Common resources and state File pool Envelope pool LFO pool Buffer pool Midi state ...] E[3. Voice pool] A --> B B --> C B --> D B --> E Built from the SFZ file Each region is a semi-passive description object that can decide whether it is \"active\" or not depending on the chain of MIDI events it receives. Once activated, a voice is chosen to play the region until it ends naturally or through note-offs or off-groups. There are a number of common resources that are needed for all the regions and in particular the voices. This includes all the (preloaded) files for the SFZ instrument, but will include in the future the EG and LFOs that are needed to achieve compliance with the SFZ v2 specification. This will also include a temporary buffer holder that voices may share. A common resource of importance is the MIDI state: note durations are needed for some opcodes -- for example rt_decay -- and triggering velocities too. The voices are the polyphony of the synth. They are idle and they get activated by the synth to play a region on a specific event. They are then \"linked\" to the region while it is played, and reset to their idle state when they are done playing the region. The Synth, Voices and Regions form the bulk of the code complexity. The rest of the engine is dedicated of mostly helper classes to enable easy management of floating-point buffers in which the audio data is held, signal processing and accelerated (SIMD) computations, and abstractions that are specific to the SFZ format such as envelope generators, curves or LFOs. Parsing the SFZ files The sfz file logic is pretty simple and well defined. The https://sfzformat.com website contains an extensive documentation on it. At its core, an SFZ file describes a list of region objects on which a certain number of \"opcodes\" will apply. Opcodes can determine the sample played, the event conditions that will trigger the sample such as the range of notes, channels, velocities, the processing to apply on the sample while playing, and many more things. It is also possible to describe a group of regions, as well as exclusive groups that will shut off other regions that may already be playing. There are also master groups, and global opcodes and some other types. All the opcodes are declared within a header, in a pseudo-xml markup language that looks like this: <global> volume=6 <control> set_cc4=5 <region> key=36 sample=kick.wav Here we have 3 headers ( global , control and region ) and each header holds some opcodes. All of these opcodes have a value --- for example the volume is equal to 6 in the global header. Some opcodes also have parameters. The control header holds an opcode set_cc with the parameter 4 and value 5 . The parameter here is the CC to set, and the value at which to set it is 5. The parsing logic of sfizz is handled through a base class called Parser --- a very original choice. This parser has a virtual callback that gets called whenever a header description is \"complete\", along with a list of opcodes that apply to the header. Subclassing the Parser then allows to build different SFZ handlers, from full-blown synths as with sfizz to simpler things such as printers (see in particular https://github.com/sfztools/sfz-flat/ ). If we look at the core of the latter example, it will look something like the following: class PrintingParser: public sfz::Parser { protected: void callback(absl::string_view header, const std::vector<sfz::Opcode>& members) final { switch (hash(header)) // The hash(...) function transforms strings to large integers { case hash(\"global\"): // It is also compile-time defined, which allows to do switch-case // statements on strings, something that is usually not possible globalMembers = members; // We save the global headers since they apply to the next // region (and groups and masters) masterMembers.clear(); groupMembers.clear(); break; case hash(\"master\"): masterMembers = members; // So on groupMembers.clear(); break; case hash(\"group\"): groupMembers = members; // .. and so forth break; case hash(\"region\"): std::cout << \"<\" << header << \">\" << ' '; // Now we print the region along with all the opcodes // we memorized from earlier headers. printMembers(globalMembers); printMembers(masterMembers); printMembers(groupMembers); printMembers(members); std::cout << '\\n'; break; default: std::cout << \"<\" << header << \">\" << ' '; printMembers(members); std::cout << '\\n'; break; } } private: std::vector<sfz::Opcode> globalMembers; std::vector<sfz::Opcode> masterMembers; std::vector<sfz::Opcode> groupMembers; void printMembers(const std::vector<sfz::Opcode>& members) { for (auto& member: members) { std::cout << member.opcode; if (member.parameter) std::cout << +*member.parameter; std::cout << \"=\" << member.value; std::cout << ' '; } } }; The main function is then quite straightforward and we call a function from the Parser class that loads a file PrintingParser parser; parser.loadSfzFile(\"my_sfz_file.sfz\"); If you circle back to the parser you will see that opcodes are stored in an Opcode class. This class does some parsing itself and separates the opcode name itself, parameters if any, and the value. Opcodes are very cheap to copy and pass around because they only refer to characters in the file that are stored inside the Parser class, so feel free to create vectors of them and move them around. Note that you may also derive the loadSfzFile() method if you have any processing you need to do before the actual parsing happens. Building the region list in sfizz The callback method from sfizz is actually quite similar to the one shown above, except that instead of printing the region we actually fill a big structure from it.","title":"The Engine"},{"location":"sfizz/engine_description/#global-view","text":"The sfizz engine is basically a \"Synth\" object that takes an SFZ file in, receives MIDI-type events and is able to render audio through successive calls to a callback function. This is in line with the way most audio applications and plugins are working. A high-level overview is presented in the following diagram. graph TD A[C and C++ API entry point] B[Synth] C[1. Region list] D[2. Common resources and state File pool Envelope pool LFO pool Buffer pool Midi state ...] E[3. Voice pool] A --> B B --> C B --> D B --> E Built from the SFZ file Each region is a semi-passive description object that can decide whether it is \"active\" or not depending on the chain of MIDI events it receives. Once activated, a voice is chosen to play the region until it ends naturally or through note-offs or off-groups. There are a number of common resources that are needed for all the regions and in particular the voices. This includes all the (preloaded) files for the SFZ instrument, but will include in the future the EG and LFOs that are needed to achieve compliance with the SFZ v2 specification. This will also include a temporary buffer holder that voices may share. A common resource of importance is the MIDI state: note durations are needed for some opcodes -- for example rt_decay -- and triggering velocities too. The voices are the polyphony of the synth. They are idle and they get activated by the synth to play a region on a specific event. They are then \"linked\" to the region while it is played, and reset to their idle state when they are done playing the region. The Synth, Voices and Regions form the bulk of the code complexity. The rest of the engine is dedicated of mostly helper classes to enable easy management of floating-point buffers in which the audio data is held, signal processing and accelerated (SIMD) computations, and abstractions that are specific to the SFZ format such as envelope generators, curves or LFOs.","title":"Global view"},{"location":"sfizz/engine_description/#parsing-the-sfz-files","text":"The sfz file logic is pretty simple and well defined. The https://sfzformat.com website contains an extensive documentation on it. At its core, an SFZ file describes a list of region objects on which a certain number of \"opcodes\" will apply. Opcodes can determine the sample played, the event conditions that will trigger the sample such as the range of notes, channels, velocities, the processing to apply on the sample while playing, and many more things. It is also possible to describe a group of regions, as well as exclusive groups that will shut off other regions that may already be playing. There are also master groups, and global opcodes and some other types. All the opcodes are declared within a header, in a pseudo-xml markup language that looks like this: <global> volume=6 <control> set_cc4=5 <region> key=36 sample=kick.wav Here we have 3 headers ( global , control and region ) and each header holds some opcodes. All of these opcodes have a value --- for example the volume is equal to 6 in the global header. Some opcodes also have parameters. The control header holds an opcode set_cc with the parameter 4 and value 5 . The parameter here is the CC to set, and the value at which to set it is 5. The parsing logic of sfizz is handled through a base class called Parser --- a very original choice. This parser has a virtual callback that gets called whenever a header description is \"complete\", along with a list of opcodes that apply to the header. Subclassing the Parser then allows to build different SFZ handlers, from full-blown synths as with sfizz to simpler things such as printers (see in particular https://github.com/sfztools/sfz-flat/ ). If we look at the core of the latter example, it will look something like the following: class PrintingParser: public sfz::Parser { protected: void callback(absl::string_view header, const std::vector<sfz::Opcode>& members) final { switch (hash(header)) // The hash(...) function transforms strings to large integers { case hash(\"global\"): // It is also compile-time defined, which allows to do switch-case // statements on strings, something that is usually not possible globalMembers = members; // We save the global headers since they apply to the next // region (and groups and masters) masterMembers.clear(); groupMembers.clear(); break; case hash(\"master\"): masterMembers = members; // So on groupMembers.clear(); break; case hash(\"group\"): groupMembers = members; // .. and so forth break; case hash(\"region\"): std::cout << \"<\" << header << \">\" << ' '; // Now we print the region along with all the opcodes // we memorized from earlier headers. printMembers(globalMembers); printMembers(masterMembers); printMembers(groupMembers); printMembers(members); std::cout << '\\n'; break; default: std::cout << \"<\" << header << \">\" << ' '; printMembers(members); std::cout << '\\n'; break; } } private: std::vector<sfz::Opcode> globalMembers; std::vector<sfz::Opcode> masterMembers; std::vector<sfz::Opcode> groupMembers; void printMembers(const std::vector<sfz::Opcode>& members) { for (auto& member: members) { std::cout << member.opcode; if (member.parameter) std::cout << +*member.parameter; std::cout << \"=\" << member.value; std::cout << ' '; } } }; The main function is then quite straightforward and we call a function from the Parser class that loads a file PrintingParser parser; parser.loadSfzFile(\"my_sfz_file.sfz\"); If you circle back to the parser you will see that opcodes are stored in an Opcode class. This class does some parsing itself and separates the opcode name itself, parameters if any, and the value. Opcodes are very cheap to copy and pass around because they only refer to characters in the file that are stored inside the Parser class, so feel free to create vectors of them and move them around. Note that you may also derive the loadSfzFile() method if you have any processing you need to do before the actual parsing happens.","title":"Parsing the SFZ files"},{"location":"sfizz/engine_description/#building-the-region-list-in-sfizz","text":"The callback method from sfizz is actually quite similar to the one shown above, except that instead of printing the region we actually fill a big structure from it.","title":"Building the region list in sfizz"},{"location":"sfizz/faq/","text":"SFZ What is it, where and how to Q: What is SFZ? Where I can find some documentation? I would like to make my own instrument. A : You can find the documentation and tutorials on the sfzformat website. Q: Are there some instruments that I can test with sfizz? A : There are various websites where to get free and commercial instruments, some of the free ones are linked from here, like sfzinstruments and freepats . Supported by sfizz Q: Which opcodes are supported by sfizz? A : The opcode support table can be found here . It has also some search filters : - by query string - by version - by status (supported, unsupported and work in progress) - by categories Plugins Linux Q: I can't load any sfz or scala file, selecting the menu / clicking the button does nothing. A : The file requester depends on the zenity package, which probably is missing in your system.","title":"FAQ"},{"location":"sfizz/faq/#sfz","text":"","title":"SFZ"},{"location":"sfizz/faq/#what-is-it-where-and-how-to","text":"Q: What is SFZ? Where I can find some documentation? I would like to make my own instrument. A : You can find the documentation and tutorials on the sfzformat website. Q: Are there some instruments that I can test with sfizz? A : There are various websites where to get free and commercial instruments, some of the free ones are linked from here, like sfzinstruments and freepats .","title":"What is it, where and how to"},{"location":"sfizz/faq/#supported-by-sfizz","text":"Q: Which opcodes are supported by sfizz? A : The opcode support table can be found here . It has also some search filters : - by query string - by version - by status (supported, unsupported and work in progress) - by categories","title":"Supported by sfizz"},{"location":"sfizz/faq/#plugins","text":"","title":"Plugins"},{"location":"sfizz/faq/#linux","text":"Q: I can't load any sfz or scala file, selecting the menu / clicking the button does nothing. A : The file requester depends on the zenity package, which probably is missing in your system.","title":"Linux"},{"location":"sfizz/quick_reference/","text":"How to do X in sfizz SFZ? This section describes basic use of some SFZ features, illustrated with examples. Some of these features may be not very widely implemented in SFZ players, or specific to sfizz. Oscillators Basic oscillator The most basic form of oscillator is obtained by using one of the predefined waveforms. The name *saw provides the sawtooth oscillator. <region> sample=*saw Detuned oscillator This creates a pair of sawtooth waves. The second sawtooth is detuned by 50 cents, making the pair create together the impression of a fuller sound. <region> sample=*saw <region> sample=*saw pitch=50 Wavetable oscillator This creates an oscillator with a custom waveform, which is loaded from an audio file. This file contains exactly one period of signal, and its sample rate is disregarded. One way to create wavetables is to use the WCreate utility. - Documentation, and Windows software: futur3soundz - macOS and Linux software: WaveTableTools The example refers to a wave composed of the 6 first harmonics: WCreate 1024 \"x<6\" sine_hrm_06.wav The oscillator opcode indicates that we are dealing with a file which is a wavetable. Starting with sfizz 0.5.0, oscillator is optional: an audio file with less than 3000 frames is considered to be a wavetable. <region> sample=sine_hrm_06.wav oscillator=on Unison oscillator This creates an array of oscillators which are spread out in gain and frequency relative to the fundamental, and arranged in opposite fashion in left and right channels to create a stereo effect. The unison mode is enabled when oscillator_multi is 3 or more, and oscillator_mode is default or 0. The example creates an array of 5 sawtooth waves, spread using a detuning interval set to 50 cents. (a \"supersaw\") <region> sample=*saw oscillator=on oscillator_multi=5 oscillator_detune=50 Ring modulation oscillator (experimental) When the opcodes are set to oscillator_mode=0 and oscillator_multi=2 , this configures a pair of oscillators for ring modulation. The modulator, whose frequency is determined by oscillator_detune in cents, modulates the amplitude of the carrier oscillator, with a depth determined by oscillator_mod_depth expressed as a percentage. <control> set_hdcc21=0.5 <region> sample=*saw oscillator=on oscillator_mode=0 oscillator_multi=2 oscillator_detune=25 oscillator_mod_depth=100 oscillator_mod_depth_oncc21=100 FM oscillator (experimental) A 2-operator FM arrangement can be constructed by setting oscillator_mode=2 . The frequency of the modulator is determined by oscillator_detune in cents, and the FM index by oscillator_mod_depth . The depth is expressed as a percentage, which means that the value 100 represents the FM index 1.0 . <control> set_cc21=100 <global> volume=-3.0 <region> sample=*sine oscillator=on oscillator_mode=2 oscillator_detune=5 oscillator_mod_depth=100 oscillator_mod_depth_oncc21=1000 Filters Modulation Effects","title":"Quick Reference"},{"location":"sfizz/quick_reference/#how-to-do-x-in-sfizz-sfz","text":"This section describes basic use of some SFZ features, illustrated with examples. Some of these features may be not very widely implemented in SFZ players, or specific to sfizz.","title":"How to do X in sfizz SFZ?"},{"location":"sfizz/quick_reference/#oscillators","text":"","title":"Oscillators"},{"location":"sfizz/quick_reference/#basic-oscillator","text":"The most basic form of oscillator is obtained by using one of the predefined waveforms. The name *saw provides the sawtooth oscillator. <region> sample=*saw","title":"Basic oscillator"},{"location":"sfizz/quick_reference/#detuned-oscillator","text":"This creates a pair of sawtooth waves. The second sawtooth is detuned by 50 cents, making the pair create together the impression of a fuller sound. <region> sample=*saw <region> sample=*saw pitch=50","title":"Detuned oscillator"},{"location":"sfizz/quick_reference/#wavetable-oscillator","text":"This creates an oscillator with a custom waveform, which is loaded from an audio file. This file contains exactly one period of signal, and its sample rate is disregarded. One way to create wavetables is to use the WCreate utility. - Documentation, and Windows software: futur3soundz - macOS and Linux software: WaveTableTools The example refers to a wave composed of the 6 first harmonics: WCreate 1024 \"x<6\" sine_hrm_06.wav The oscillator opcode indicates that we are dealing with a file which is a wavetable. Starting with sfizz 0.5.0, oscillator is optional: an audio file with less than 3000 frames is considered to be a wavetable. <region> sample=sine_hrm_06.wav oscillator=on","title":"Wavetable oscillator"},{"location":"sfizz/quick_reference/#unison-oscillator","text":"This creates an array of oscillators which are spread out in gain and frequency relative to the fundamental, and arranged in opposite fashion in left and right channels to create a stereo effect. The unison mode is enabled when oscillator_multi is 3 or more, and oscillator_mode is default or 0. The example creates an array of 5 sawtooth waves, spread using a detuning interval set to 50 cents. (a \"supersaw\") <region> sample=*saw oscillator=on oscillator_multi=5 oscillator_detune=50","title":"Unison oscillator"},{"location":"sfizz/quick_reference/#ring-modulation-oscillator-experimental","text":"When the opcodes are set to oscillator_mode=0 and oscillator_multi=2 , this configures a pair of oscillators for ring modulation. The modulator, whose frequency is determined by oscillator_detune in cents, modulates the amplitude of the carrier oscillator, with a depth determined by oscillator_mod_depth expressed as a percentage. <control> set_hdcc21=0.5 <region> sample=*saw oscillator=on oscillator_mode=0 oscillator_multi=2 oscillator_detune=25 oscillator_mod_depth=100 oscillator_mod_depth_oncc21=100","title":"Ring modulation oscillator (experimental)"},{"location":"sfizz/quick_reference/#fm-oscillator-experimental","text":"A 2-operator FM arrangement can be constructed by setting oscillator_mode=2 . The frequency of the modulator is determined by oscillator_detune in cents, and the FM index by oscillator_mod_depth . The depth is expressed as a percentage, which means that the value 100 represents the FM index 1.0 . <control> set_cc21=100 <global> volume=-3.0 <region> sample=*sine oscillator=on oscillator_mode=2 oscillator_detune=5 oscillator_mod_depth=100 oscillator_mod_depth_oncc21=1000","title":"FM oscillator (experimental)"},{"location":"sfizz/quick_reference/#filters","text":"","title":"Filters"},{"location":"sfizz/quick_reference/#modulation","text":"","title":"Modulation"},{"location":"sfizz/quick_reference/#effects","text":"","title":"Effects"},{"location":"sfizz/api/","text":"C sfizz.h sfizz_message.h C++ sfizz.hpp","title":"API"},{"location":"sfizz/api/#c","text":"sfizz.h sfizz_message.h","title":"C"},{"location":"sfizz/api/#c_1","text":"sfizz.hpp","title":"C++"},{"location":"sfizz/api/sfizz.h/","text":"","title":"Sfizz.h"},{"location":"sfizz/api/sfizz.hpp/","text":"","title":"sfz::Sfizz"},{"location":"sfizz/api/sfizz_message.h/","text":"","title":"Sfizz message.h"},{"location":"sfizz/development/build/","text":"Git Ensure to have git installed to be able to download the sfizz source files, then run: git clone --recursive https://github.com/sfztools/sfizz-ui.git This will also download recursively all the submodules required to build the project. Use sfizz.git repository if you are only interested on the library. If you already downloaded the project without the recursive (or recurse-submodules ) option, you can run: git submodule update --init --recursive See also the main FAQ page. Dependencies On macOS and Windows we build most of bundled dependencies statically. However you can use a package manager to install the required libraries, like [Homebrew] on macOS and specifying the related SFIZZ_USE_SYSTEM_* CMake options (see below). This will also speed up the build process. Check the Linux page for details on how to install the required libraries on various distributions. CMake Build System We use CMake as build system. The basic process is to configure and build the project. On macOS using brew : brew update brew upgrade cmake Configuration Some of the following options might be added / changed / removed, so please check the main CMakeLists.txt on the root directory of the repository. If using the sfizz-ui repository check also in the library subdirectory / submodule. Current configuration options for sfizz are: ENABLE_LTO Enable Link Time Optimization [default: ON] SFIZZ_JACK Enable JACK stand-alone build [default: ON only on Linux] SFIZZ_RENDER Enable renderer of SMF files [default: ON] SFIZZ_SHARED Enable shared library build [default: ON] PLUGIN_AU Enable AU plug-in build [default: ON only on macOS] PLUGIN_LV2 Enable LV2 plug-in build [default: ON] PLUGIN_LV2_UI Enable LV2 GUI build [default: ON] PLUGIN_PUREDATA Enable Puredata plug-in build [default: OFF] PLUGIN_VST2 Enable VST2 plug-in build (unsupported) [default: OFF] PLUGIN_VST3 Enable VST3 plug-in build [default: ON] SFIZZ_BENCHMARKS Enable benchmarks build [default: OFF] SFIZZ_DEMOS Enable feature demos build [default: OFF] SFIZZ_DEVTOOLS Enable developer tools build [default: OFF] SFIZZ_TESTS Enable tests build [default: OFF] SFIZZ_USE_SNDFILE Build with libsndfile [default: OFF] SFIZZ_SNDFILE_STATIC Link the sndfile library statically [default: OFF] SFIZZ_USE_SYSTEM_ABSEIL Use Abseil libraries preinstalled on system [default: OFF] SFIZZ_USE_SYSTEM_CATCH Use Catch libraries preinstalled on system [default: OFF] SFIZZ_USE_SYSTEM_CXXOPTS Use CXXOPTS libraries preinstalled on system [default: OFF] SFIZZ_USE_SYSTEM_GHC_FS Use GHC Filesystem libraries preinstalled on system [default: OFF] SFIZZ_USE_SYSTEM_LV2 Use LV2 headers preinstalled on system [default: OFF] SFIZZ_USE_SYSTEM_SIMDE Use SIMDe libraries preinstalled on system [default: OFF] SFIZZ_USE_SYSTEM_KISS_FFT Use KISS libraries preinstalled on system [default: OFF] SFIZZ_USE_SYSTEM_PUGIXML Use pugixml libraries preinstalled on system [default: OFF] SFIZZ_USE_SYSTEM_VST3SDK Use VST3SDK source files preinstalled on system [default: OFF] SFIZZ_PROFILE_BUILD Profile the build time [default: OFF] SFIZZ_RELEASE_ASSERTS Forced assertions in release builds [default: OFF] On macOS it's possible to enable universal builds by adding -D CMAKE_OSX_ARCHITECTURES=\"arm64;x86_64\" . Build The 3 basic steps are: - create a build directory and cd into it - create the configuration - run the build command (the following example uses make , default build tool on Unix based systems) mkdir build && cd build cmake .. make From (at least) CMake v3.13 this can be done in 2 steps in a crossplatform way: cmake -B build -S . cmake --build build For further details check the CMake configuration options manual . For reference check also our CI build workflow file. You can build with clang , although in that case the CMakeFile defaults to using libc++ instead of libstdc++ . By default this builds: - The shared library version of sfizz with both C and C++ interfaces - The JACK client on Linux - The offline rendering client - The AU plugin on macOS - The LV2 plugin and its UI - The VST3 plugin Examples All targets but the GUI-less LV2 plugin can be disabled using: cmake .. \\ -DSFIZZ_JACK=OFF \\ -DSFIZZ_SHARED=OFF \\ -DSFIZZ_RENDER=OFF \\ -DPLUGIN_LV2_UI=OFF \\ -DPLUGIN_VST3=OFF and process as before. All targets but sfizz_render can be disabled using: cmake .. \\ -DSFIZZ_JACK=OFF \\ -DSFIZZ_SHARED=OFF \\ -DPLUGIN_LV2=OFF \\ -DPLUGIN_LV2_UI=OFF \\ -DPLUGIN_VST3=OFF and process as before. Rendering MIDI files You can find sfizz_render in clients/sfizz_render . From your build directory, type clients/sfizz_render --help for more information.","title":"Build"},{"location":"sfizz/development/build/#git","text":"Ensure to have git installed to be able to download the sfizz source files, then run: git clone --recursive https://github.com/sfztools/sfizz-ui.git This will also download recursively all the submodules required to build the project. Use sfizz.git repository if you are only interested on the library. If you already downloaded the project without the recursive (or recurse-submodules ) option, you can run: git submodule update --init --recursive See also the main FAQ page.","title":"Git"},{"location":"sfizz/development/build/#dependencies","text":"On macOS and Windows we build most of bundled dependencies statically. However you can use a package manager to install the required libraries, like [Homebrew] on macOS and specifying the related SFIZZ_USE_SYSTEM_* CMake options (see below). This will also speed up the build process. Check the Linux page for details on how to install the required libraries on various distributions.","title":"Dependencies"},{"location":"sfizz/development/build/#cmake-build-system","text":"We use CMake as build system. The basic process is to configure and build the project. On macOS using brew : brew update brew upgrade cmake","title":"CMake Build System"},{"location":"sfizz/development/build/#configuration","text":"Some of the following options might be added / changed / removed, so please check the main CMakeLists.txt on the root directory of the repository. If using the sfizz-ui repository check also in the library subdirectory / submodule. Current configuration options for sfizz are: ENABLE_LTO Enable Link Time Optimization [default: ON] SFIZZ_JACK Enable JACK stand-alone build [default: ON only on Linux] SFIZZ_RENDER Enable renderer of SMF files [default: ON] SFIZZ_SHARED Enable shared library build [default: ON] PLUGIN_AU Enable AU plug-in build [default: ON only on macOS] PLUGIN_LV2 Enable LV2 plug-in build [default: ON] PLUGIN_LV2_UI Enable LV2 GUI build [default: ON] PLUGIN_PUREDATA Enable Puredata plug-in build [default: OFF] PLUGIN_VST2 Enable VST2 plug-in build (unsupported) [default: OFF] PLUGIN_VST3 Enable VST3 plug-in build [default: ON] SFIZZ_BENCHMARKS Enable benchmarks build [default: OFF] SFIZZ_DEMOS Enable feature demos build [default: OFF] SFIZZ_DEVTOOLS Enable developer tools build [default: OFF] SFIZZ_TESTS Enable tests build [default: OFF] SFIZZ_USE_SNDFILE Build with libsndfile [default: OFF] SFIZZ_SNDFILE_STATIC Link the sndfile library statically [default: OFF] SFIZZ_USE_SYSTEM_ABSEIL Use Abseil libraries preinstalled on system [default: OFF] SFIZZ_USE_SYSTEM_CATCH Use Catch libraries preinstalled on system [default: OFF] SFIZZ_USE_SYSTEM_CXXOPTS Use CXXOPTS libraries preinstalled on system [default: OFF] SFIZZ_USE_SYSTEM_GHC_FS Use GHC Filesystem libraries preinstalled on system [default: OFF] SFIZZ_USE_SYSTEM_LV2 Use LV2 headers preinstalled on system [default: OFF] SFIZZ_USE_SYSTEM_SIMDE Use SIMDe libraries preinstalled on system [default: OFF] SFIZZ_USE_SYSTEM_KISS_FFT Use KISS libraries preinstalled on system [default: OFF] SFIZZ_USE_SYSTEM_PUGIXML Use pugixml libraries preinstalled on system [default: OFF] SFIZZ_USE_SYSTEM_VST3SDK Use VST3SDK source files preinstalled on system [default: OFF] SFIZZ_PROFILE_BUILD Profile the build time [default: OFF] SFIZZ_RELEASE_ASSERTS Forced assertions in release builds [default: OFF] On macOS it's possible to enable universal builds by adding -D CMAKE_OSX_ARCHITECTURES=\"arm64;x86_64\" .","title":"Configuration"},{"location":"sfizz/development/build/#build","text":"The 3 basic steps are: - create a build directory and cd into it - create the configuration - run the build command (the following example uses make , default build tool on Unix based systems) mkdir build && cd build cmake .. make From (at least) CMake v3.13 this can be done in 2 steps in a crossplatform way: cmake -B build -S . cmake --build build For further details check the CMake configuration options manual . For reference check also our CI build workflow file. You can build with clang , although in that case the CMakeFile defaults to using libc++ instead of libstdc++ . By default this builds: - The shared library version of sfizz with both C and C++ interfaces - The JACK client on Linux - The offline rendering client - The AU plugin on macOS - The LV2 plugin and its UI - The VST3 plugin","title":"Build"},{"location":"sfizz/development/build/#examples","text":"All targets but the GUI-less LV2 plugin can be disabled using: cmake .. \\ -DSFIZZ_JACK=OFF \\ -DSFIZZ_SHARED=OFF \\ -DSFIZZ_RENDER=OFF \\ -DPLUGIN_LV2_UI=OFF \\ -DPLUGIN_VST3=OFF and process as before. All targets but sfizz_render can be disabled using: cmake .. \\ -DSFIZZ_JACK=OFF \\ -DSFIZZ_SHARED=OFF \\ -DPLUGIN_LV2=OFF \\ -DPLUGIN_LV2_UI=OFF \\ -DPLUGIN_VST3=OFF and process as before.","title":"Examples"},{"location":"sfizz/development/build/#rendering-midi-files","text":"You can find sfizz_render in clients/sfizz_render . From your build directory, type clients/sfizz_render --help for more information.","title":"Rendering MIDI files"},{"location":"sfizz/development/build/linux/","text":"On this page we specify the required packages on Debian / Ubuntu and Fedora (based) distributions for reference, but unfortunately we can't cover all systems. For Archlinux based systems you can check their official PKGBUILD ; we also provide one for the current development source tree on AUR . Dependencies In order to build the plugins with the GUI, you need to install the following dependencies. For the standalone client and other demos, you need to install also the JACK Audio Connection Kit library. Ubuntu / Debian sudo apt install \\ libcairo2-dev \\ libfontconfig1-dev \\ libfreetype6-dev \\ libglib2.0-dev \\ libpango1.0-dev \\ libx11-dev \\ libx11-xcb-dev \\ libxcb-cursor-dev \\ libxcb-keysyms1-dev \\ libxcb-util-dev \\ libxcb-xkb-dev \\ libxkbcommon-dev \\ libxkbcommon-x11-dev \\ zenity \\ libjack-jackd2-dev Fedora sudo dnf install \\ cairo-devel \\ fontconfig-devel \\ freetype-devel \\ glib2-devel \\ libX11-devel \\ libxcb-devel \\ libxkbcommon-devel \\ libxkbcommon-x11-devel \\ pango-devel \\ xcb-util-cursor-devel \\ xcb-util-devel \\ xcb-util-keysyms-devel \\ zenity \\ jack-audio-connection-kit-devel The default build uses the bundled dr_libs library for audio samples management. If building with libsndfile , Debian and Ubuntu provide a libsndfile1-dev package, libsndfile-devel for Fedora. Benchmarks The benchmarks depend on the benchmark library. If you wish to build the benchmarks you should either build the static library from source, or use the library from your distribution. Debian and Ubuntu provide a libbenchmark-dev package, google-benchmark-devel for Fedora. JACK Standalone Client You can find the JACK client in clients/sfizz_jack . The JACK client client will forcefully connect to the system output, and open an event input in JACK for you to connect a midi capable software or hardware (e.g. jack-keyboard ). If no JACK server is already started it will start one with basic options.","title":"Linux Build"},{"location":"sfizz/development/build/linux/#dependencies","text":"In order to build the plugins with the GUI, you need to install the following dependencies. For the standalone client and other demos, you need to install also the JACK Audio Connection Kit library.","title":"Dependencies"},{"location":"sfizz/development/build/linux/#ubuntu-debian","text":"sudo apt install \\ libcairo2-dev \\ libfontconfig1-dev \\ libfreetype6-dev \\ libglib2.0-dev \\ libpango1.0-dev \\ libx11-dev \\ libx11-xcb-dev \\ libxcb-cursor-dev \\ libxcb-keysyms1-dev \\ libxcb-util-dev \\ libxcb-xkb-dev \\ libxkbcommon-dev \\ libxkbcommon-x11-dev \\ zenity \\ libjack-jackd2-dev","title":"Ubuntu / Debian"},{"location":"sfizz/development/build/linux/#fedora","text":"sudo dnf install \\ cairo-devel \\ fontconfig-devel \\ freetype-devel \\ glib2-devel \\ libX11-devel \\ libxcb-devel \\ libxkbcommon-devel \\ libxkbcommon-x11-devel \\ pango-devel \\ xcb-util-cursor-devel \\ xcb-util-devel \\ xcb-util-keysyms-devel \\ zenity \\ jack-audio-connection-kit-devel The default build uses the bundled dr_libs library for audio samples management. If building with libsndfile , Debian and Ubuntu provide a libsndfile1-dev package, libsndfile-devel for Fedora.","title":"Fedora"},{"location":"sfizz/development/build/linux/#benchmarks","text":"The benchmarks depend on the benchmark library. If you wish to build the benchmarks you should either build the static library from source, or use the library from your distribution. Debian and Ubuntu provide a libbenchmark-dev package, google-benchmark-devel for Fedora.","title":"Benchmarks"},{"location":"sfizz/development/build/linux/#jack-standalone-client","text":"You can find the JACK client in clients/sfizz_jack . The JACK client client will forcefully connect to the system output, and open an event input in JACK for you to connect a midi capable software or hardware (e.g. jack-keyboard ). If no JACK server is already started it will start one with basic options.","title":"JACK Standalone Client"},{"location":"sfizz/development/status/","text":"View detailed list The classification of opcodes follows the list over at sfzformat.com . Version Status SFZ v1 96% 1% SFZ v2 44% ARIA 45% Complete Work In Progress Supported Headers All headers, including < sample > are currently supported. Supported Operating Systems Linux macOS X Windows","title":"Opcodes Support Status"},{"location":"sfizz/development/status/#supported-headers","text":"All headers, including < sample > are currently supported.","title":"Supported Headers"},{"location":"sfizz/development/status/#supported-operating-systems","text":"Linux macOS X Windows","title":"Supported Operating Systems"},{"location":"sfizz/development/status/opcodes/","text":"","title":"Opcodes Support Table"}]}